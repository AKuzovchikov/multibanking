/*
 * finAPI RESTful Services
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.64.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Bank server&#39;s response to a direct debit order request
 */
@ApiModel(description = "Bank server's response to a direct debit order request")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-05T12:19:21.458Z")
public class DirectDebitOrderingResponse {
  @SerializedName("successMessage")
  private String successMessage = null;

  @SerializedName("warnMessage")
  private String warnMessage = null;

  @SerializedName("paymentId")
  private Long paymentId = null;

  @SerializedName("challengeMessage")
  private String challengeMessage = null;

  @SerializedName("answerFieldLabel")
  private String answerFieldLabel = null;

  @SerializedName("tanListNumber")
  private String tanListNumber = null;

  @SerializedName("opticalData")
  private String opticalData = null;

  @SerializedName("photoTanMimeType")
  private String photoTanMimeType = null;

  @SerializedName("photoTanData")
  private String photoTanData = null;

  public DirectDebitOrderingResponse successMessage(String successMessage) {
    this.successMessage = successMessage;
    return this;
  }

   /**
   * Technical message from the bank server, confirming the success of the request. Typically, you would not want to present this message to the user. Note that this field may not be set. However if it is not set, it does not necessarily mean that there was an error in processing the request.
   * @return successMessage
  **/
  @ApiModelProperty(example = "Auftrag ausgeführt.", value = "Technical message from the bank server, confirming the success of the request. Typically, you would not want to present this message to the user. Note that this field may not be set. However if it is not set, it does not necessarily mean that there was an error in processing the request.")
  public String getSuccessMessage() {
    return successMessage;
  }

  public void setSuccessMessage(String successMessage) {
    this.successMessage = successMessage;
  }

  public DirectDebitOrderingResponse warnMessage(String warnMessage) {
    this.warnMessage = warnMessage;
    return this;
  }

   /**
   * In some cases, a bank server may accept the requested order, but return a warn message. This message may be of technical nature, but could also be of interest to the user.
   * @return warnMessage
  **/
  @ApiModelProperty(example = "Auftrag konnte nicht ausgeführt werden.", value = "In some cases, a bank server may accept the requested order, but return a warn message. This message may be of technical nature, but could also be of interest to the user.")
  public String getWarnMessage() {
    return warnMessage;
  }

  public void setWarnMessage(String warnMessage) {
    this.warnMessage = warnMessage;
  }

  public DirectDebitOrderingResponse paymentId(Long paymentId) {
    this.paymentId = paymentId;
    return this;
  }

   /**
   * Payment identifier. Can be used to retrieve the status of the payment (see &#39;Get payments&#39; service)
   * @return paymentId
  **/
  @ApiModelProperty(example = "1", required = true, value = "Payment identifier. Can be used to retrieve the status of the payment (see 'Get payments' service)")
  public Long getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(Long paymentId) {
    this.paymentId = paymentId;
  }

  public DirectDebitOrderingResponse challengeMessage(String challengeMessage) {
    this.challengeMessage = challengeMessage;
    return this;
  }

   /**
   * Message from the bank server containing information or instructions on how to retrieve the TAN that is needed to execute the requested order. This message should be presented to the user. Note that some bank servers may limit the message to just the most crucial information, e.g. the message may contain just a single number that depicts the target TAN number on a user&#39;s TAN list. You may want to parse the challenge message for such cases and extend it with more detailed information before showing it to the user.
   * @return challengeMessage
  **/
  @ApiModelProperty(example = "Bitte geben Sie die TAN ein, die Sie per SMS erhalten.", value = "Message from the bank server containing information or instructions on how to retrieve the TAN that is needed to execute the requested order. This message should be presented to the user. Note that some bank servers may limit the message to just the most crucial information, e.g. the message may contain just a single number that depicts the target TAN number on a user's TAN list. You may want to parse the challenge message for such cases and extend it with more detailed information before showing it to the user.")
  public String getChallengeMessage() {
    return challengeMessage;
  }

  public void setChallengeMessage(String challengeMessage) {
    this.challengeMessage = challengeMessage;
  }

  public DirectDebitOrderingResponse answerFieldLabel(String answerFieldLabel) {
    this.answerFieldLabel = answerFieldLabel;
    return this;
  }

   /**
   * Suggestion from the bank server on how you can label your input field where the user must enter his TAN. A typical value that many bank servers give is &#39;TAN-Nummer&#39;.
   * @return answerFieldLabel
  **/
  @ApiModelProperty(example = "TAN-Nummer", value = "Suggestion from the bank server on how you can label your input field where the user must enter his TAN. A typical value that many bank servers give is 'TAN-Nummer'.")
  public String getAnswerFieldLabel() {
    return answerFieldLabel;
  }

  public void setAnswerFieldLabel(String answerFieldLabel) {
    this.answerFieldLabel = answerFieldLabel;
  }

  public DirectDebitOrderingResponse tanListNumber(String tanListNumber) {
    this.tanListNumber = tanListNumber;
    return this;
  }

   /**
   * In case that the bank server has instructed the user to look up a TAN from a TAN list, this field may contain the identification number of the TAN list. However in most cases, this field is only set (i.e. not null) when the user has multiple active TAN lists.
   * @return tanListNumber
  **/
  @ApiModelProperty(example = "001", value = "In case that the bank server has instructed the user to look up a TAN from a TAN list, this field may contain the identification number of the TAN list. However in most cases, this field is only set (i.e. not null) when the user has multiple active TAN lists.")
  public String getTanListNumber() {
    return tanListNumber;
  }

  public void setTanListNumber(String tanListNumber) {
    this.tanListNumber = tanListNumber;
  }

  public DirectDebitOrderingResponse opticalData(String opticalData) {
    this.opticalData = opticalData;
    return this;
  }

   /**
   * In case that the bank server has instructed the user to scan a flicker code, then this field will contain the raw data for the flicker animation as a BASE-64 string. Otherwise, this field will be not set (i.e. null). For more information on how to process the flicker code data, please address the &lt;a href&#x3D;&#39;https://finapi.zendesk.com&#39; target&#x3D;&#39;_blank&#39;&gt;finAPI Developer Portal&lt;/a&gt;.
   * @return opticalData
  **/
  @ApiModelProperty(example = "11048813833205002812775114302C30315D", value = "In case that the bank server has instructed the user to scan a flicker code, then this field will contain the raw data for the flicker animation as a BASE-64 string. Otherwise, this field will be not set (i.e. null). For more information on how to process the flicker code data, please address the <a href='https://finapi.zendesk.com' target='_blank'>finAPI Developer Portal</a>.")
  public String getOpticalData() {
    return opticalData;
  }

  public void setOpticalData(String opticalData) {
    this.opticalData = opticalData;
  }

  public DirectDebitOrderingResponse photoTanMimeType(String photoTanMimeType) {
    this.photoTanMimeType = photoTanMimeType;
    return this;
  }

   /**
   * In case that the &#39;photoTanData&#39; field is set (i.e. not null), this field contains the MIME type to use for interpreting the photo data (e.g.: &#39;image/png&#39;)
   * @return photoTanMimeType
  **/
  @ApiModelProperty(example = "image/svg+xml", value = "In case that the 'photoTanData' field is set (i.e. not null), this field contains the MIME type to use for interpreting the photo data (e.g.: 'image/png')")
  public String getPhotoTanMimeType() {
    return photoTanMimeType;
  }

  public void setPhotoTanMimeType(String photoTanMimeType) {
    this.photoTanMimeType = photoTanMimeType;
  }

  public DirectDebitOrderingResponse photoTanData(String photoTanData) {
    this.photoTanData = photoTanData;
    return this;
  }

   /**
   * In case that the bank server has instructed the user to scan a photo (or more generally speaking, any kind of QR-code-like data), then this field will contain the raw data of the photo as a BASE-64 string. Otherwise, this field will be not set (i.e. null). For more information on how to process the photo data, please address the &lt;a href&#x3D;&#39;https://finapi.zendesk.com&#39; target&#x3D;&#39;_blank&#39;&gt;finAPI Developer Portal&lt;/a&gt;.
   * @return photoTanData
  **/
  @ApiModelProperty(example = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IURPQ1RZUEUgc3ZnIFBVQkxJQyAiLS8vVzNDLy9EVEQgU1ZHIDEuMS8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGQiPgo8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDIxMi43NTUgMjEyLjc1NSIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMjEyLjc1NSAyMTIuNzU1IiB3aWR0aD0iMTZweCIgaGVpZ2h0PSIxNnB4Ij4KICA8Zz4KICAgIDxwYXRoIGQ9Ik0xMDYuMzc3LDBDNDcuNzIxLDAsMCw0Ny43MjEsMCwxMDYuMzc3czQ3LjcyMSwxMDYuMzc3LDEwNi4zNzcsMTA2LjM3N3MxMDYuMzc3LTQ3LjcyMSwxMDYuMzc3LTEwNi4zNzcgICBTMTY1LjAzNCwwLDEwNi4zNzcsMHogTTEwNi4zNzcsMTk4Ljc1NUM1NS40NCwxOTguNzU1LDE0LDE1Ny4zMTQsMTQsMTA2LjM3N1M1NS40NCwxNCwxMDYuMzc3LDE0czkyLjM3Nyw0MS40NCw5Mi4zNzcsOTIuMzc3ICAgUzE1Ny4zMTQsMTk4Ljc1NSwxMDYuMzc3LDE5OC43NTV6IiBmaWxsPSIjMDAwMDAwIi8+CiAgICA8cGF0aCBkPSJtMTEzLjM3NywxMDAuMDk2di0zOS43NDRjMy45NjEsMS40NzEgNy40MTcsNC4xNyA5LjgyLDcuODIgMi4xMjcsMy4yMjkgNi40NjgsNC4xMjMgOS42OTYsMS45OTcgMy4yMjktMi4xMjYgNC4xMjMtNi40NjcgMS45OTYtOS42OTYtNS4wMjktNy42MzYtMTIuNzc4LTEyLjgyLTIxLjUxMi0xNC42NDd2LTExLjEyYzAtMy44NjYtMy4xMzQtNy03LTdzLTcsMy4xMzQtNyw3djExLjA5OWMtMTUuNDkzLDMuMjMtMjcuMTY4LDE2Ljk4OS0yNy4xNjgsMzMuNDI2IDAsMTYuNDM3IDExLjY3NiwzMC4xOTggMjcuMTY4LDMzLjQyOHYzOS43NDRjLTMuOTYxLTEuNDcxLTcuNDE3LTQuMTctOS44Mi03LjgyLTIuMTI3LTMuMjI5LTYuNDY4LTQuMTI0LTkuNjk2LTEuOTk3LTMuMjI5LDIuMTI2LTQuMTIzLDYuNDY3LTEuOTk2LDkuNjk2IDUuMDI5LDcuNjM2IDEyLjc3OCwxMi44MiAyMS41MTIsMTQuNjQ3djExLjExOWMwLDMuODY2IDMuMTM0LDcgNyw3czctMy4xMzQgNy03di0xMS4wOThjMTUuNDkzLTMuMjMgMjcuMTY4LTE2Ljk4OSAyNy4xNjgtMzMuNDI2LTIuODQyMTdlLTE0LTE2LjQzNy0xMS42NzUtMzAuMTk4LTI3LjE2OC0zMy40Mjh6bS0yNy4xNjgtMjAuODY1YzAtOC42NTMgNS40OTQtMTYuMDI3IDEzLjE2OC0xOC44NzR2MzcuNzQ4Yy03LjY3NC0yLjg0Ny0xMy4xNjgtMTAuMjIxLTEzLjE2OC0xOC44NzR6bTI3LjE2OCw3My4xNjZ2LTM3Ljc0OGM3LjY3NCwyLjg0NyAxMy4xNjgsMTAuMjIxIDEzLjE2OCwxOC44NzRzLTUuNDkzLDE2LjAyNy0xMy4xNjgsMTguODc0eiIgZmlsbD0iIzAwMDAwMCIvPgogIDwvZz4KPC9zdmc+Cg==", value = "In case that the bank server has instructed the user to scan a photo (or more generally speaking, any kind of QR-code-like data), then this field will contain the raw data of the photo as a BASE-64 string. Otherwise, this field will be not set (i.e. null). For more information on how to process the photo data, please address the <a href='https://finapi.zendesk.com' target='_blank'>finAPI Developer Portal</a>.")
  public String getPhotoTanData() {
    return photoTanData;
  }

  public void setPhotoTanData(String photoTanData) {
    this.photoTanData = photoTanData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectDebitOrderingResponse directDebitOrderingResponse = (DirectDebitOrderingResponse) o;
    return Objects.equals(this.successMessage, directDebitOrderingResponse.successMessage) &&
        Objects.equals(this.warnMessage, directDebitOrderingResponse.warnMessage) &&
        Objects.equals(this.paymentId, directDebitOrderingResponse.paymentId) &&
        Objects.equals(this.challengeMessage, directDebitOrderingResponse.challengeMessage) &&
        Objects.equals(this.answerFieldLabel, directDebitOrderingResponse.answerFieldLabel) &&
        Objects.equals(this.tanListNumber, directDebitOrderingResponse.tanListNumber) &&
        Objects.equals(this.opticalData, directDebitOrderingResponse.opticalData) &&
        Objects.equals(this.photoTanMimeType, directDebitOrderingResponse.photoTanMimeType) &&
        Objects.equals(this.photoTanData, directDebitOrderingResponse.photoTanData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(successMessage, warnMessage, paymentId, challengeMessage, answerFieldLabel, tanListNumber, opticalData, photoTanMimeType, photoTanData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectDebitOrderingResponse {\n");
    
    sb.append("    successMessage: ").append(toIndentedString(successMessage)).append("\n");
    sb.append("    warnMessage: ").append(toIndentedString(warnMessage)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    challengeMessage: ").append(toIndentedString(challengeMessage)).append("\n");
    sb.append("    answerFieldLabel: ").append(toIndentedString(answerFieldLabel)).append("\n");
    sb.append("    tanListNumber: ").append(toIndentedString(tanListNumber)).append("\n");
    sb.append("    opticalData: ").append(toIndentedString(opticalData)).append("\n");
    sb.append("    photoTanMimeType: ").append(toIndentedString(photoTanMimeType)).append("\n");
    sb.append("    photoTanData: ").append(toIndentedString(photoTanData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

